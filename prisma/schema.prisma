// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    username      String
    email         String    @unique
    emailVerified DateTime?
    password      String
    image         String?
    role          Role      @default(ADMIN)
    accounts      Account[]
    sessions      Session[]

    eventResults  UserEnrollment[]
    organizations OrganizationMember[]
}

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

// model Post {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     content  String @db.VarChar(255)
//     authorId String

//     @@index([authorId])
// }

model Event {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name         String             @db.VarChar(64)
    description  String?            @db.VarChar(4000)
    startDate    DateTime?
    endDate      DateTime?
    durationTime Int?               @db.SmallInt
    eventAuthorId String
    evenAuthor EntityHasEvent @relation(fields: [eventAuthorId], references: [id])

    isPublished   Boolean?  @db.Boolean()
    publishedAt   DateTime? @db.Timestamp()
    unpublishedAt DateTime? @db.Timestamp()

    usersCompletedEvent UserEnrollment[]


    // @@index([authorId])
}

model UserEnrollment {
    id        String   @id @default(cuid())
    event   Event  @relation(fields: [eventId], references: [id])
    eventId String
    user    User   @relation(fields: [userId], references: [id])
    userId  String

    result    Json?
    startDate DateTime?
    endDate   DateTime?
    createdAt DateTime @default(now())
}

model Organization {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String  @db.VarChar(255)
    token     String? @db.VarChar(255)
    routePath String? @db.VarChar(255)

    members OrganizationMember[]
    events EntityHasEvent[]
}

model OrganizationMember {
    id             String       @id @default(cuid())
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    user           User         @relation(fields: [userId], references: [id])
    userId         String

    event     EntityHasEvent[]
    createdAt DateTime @default(now())
}

// model ServiceAccount {
//     id  String       @id @default(cuid())

//     event     EntityHasEvent[]

//     organization Organization @relation(fields: [organizationId], references: [id])
    
//     organizationId String
// }

model EntityHasEvent {
    id  String       @id @default(cuid())
    event     Event[]
    authorId     String?
    author       OrganizationMember? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    organizationAuthorId String?
    organizationAuthor       Organization? @relation(fields: [organizationAuthorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

enum Role {
    GUEST
    USER
    CREATOR
    ADMIN
}